%% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 30-Dec-2016 21:42:35
%

doo = 1;
if doo == 1

    load ScatData.mat

    x = x_input;
    t = x_darm;
else
    % load data made via the python MockData repo
    load ../../MockData/DARMwithNoise.mat

    tt = times;
    k = find(tt < 0.3, 1, 'last');

    ts = tt(2) - tt(1);
    fs = 1/ts;
    tt = tt(k:end);
    x  = wit(k:end);
    t       = 1e18 * darm(k:end);             % normalize DARM
    x_noise = 1e18 * background(k:end);

    clear darm wit1 wit2 background times
end


%% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Bayesian Regularization backpropagation.

% Create a Fitting Network
hiddenLayerSize = [7];                       % this is just a guess
net = fitnet(hiddenLayerSize, trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns  = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn  = 'divideblock';  % Divide data randomly
net.divideMode = 'sample';       % Divide up every sample
net.divideParam.trainRatio = 50/100;
net.divideParam.valRatio   = 10/100;
net.divideParam.testRatio  = 40/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
                'plotregression', 'plotfit'};

[b,a] = butter(2, [40 400]/(fs/2));
t_full = t;
bg_full = x_noise;
t = filtfilt(b, a, t);
x_noise = filtfilt(b, a, x_noise);

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets   = t .* tr.valMask{1};
testTargets  = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y)
valPerformance   = perform(net,valTargets,y)
testPerformance  = perform(net,testTargets,y)

% View the Network
%view(net)

%% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
figure, plotregression(t,y)
figure(407)
plot(tt, t, 'ko',...
     tt, y, 'c',...
     tt, t - y, 'r',...
     tt, x_noise, 'y.')
grid
xlim([min(tt) max(tt)])
legend('DARM', 'Estimate', 'Residual', 'Shot Noise',...
    'Location', 'SouthWest')
xlabel('Time [s]')


plot_sub_results(bg_full, t_full, y, fs)

%% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (false)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'myNeuralNetworkFunction');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net);
end
